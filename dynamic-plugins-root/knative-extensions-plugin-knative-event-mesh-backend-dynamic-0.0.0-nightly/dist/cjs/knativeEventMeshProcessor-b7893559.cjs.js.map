{"version":3,"file":"knativeEventMeshProcessor-b7893559.cjs.js","sources":["../../src/providers/config.ts","../../src/providers/types.ts","../../src/providers/knativeEventMeshProvider.ts","../../src/providers/knativeEventMeshProcessor.ts"],"sourcesContent":["import {readTaskScheduleDefinitionFromConfig} from '@backstage/backend-tasks';\nimport {Config} from '@backstage/config';\n\nimport {KnativeEventMeshProviderConfig} from './types';\n\nexport function readKnativeEventMeshProviderConfigs(config:Config):KnativeEventMeshProviderConfig[] {\n    const providerConfigs = config.getOptionalConfig(\n        'catalog.providers.knativeEventMesh',\n    );\n    if (!providerConfigs) {\n        return [];\n    }\n    return providerConfigs\n        .keys()\n        .map(id =>\n            readKnativeEventMeshProviderConfig(id, providerConfigs.getConfig(id)),\n        );\n}\n\nfunction readKnativeEventMeshProviderConfig(id:string, config:Config):KnativeEventMeshProviderConfig {\n    const baseUrl = config.getString('baseUrl');\n\n    const schedule = config.has('schedule')\n        ? readTaskScheduleDefinitionFromConfig(config.getConfig('schedule'))\n        : undefined;\n\n    return {\n        id,\n        baseUrl,\n        schedule,\n    };\n}\n","import {TaskScheduleDefinition} from '@backstage/backend-tasks';\n\nexport type KnativeEventMeshProviderConfig = {\n    id:string;\n    baseUrl:string;\n    schedule?:TaskScheduleDefinition;\n};\n\nexport const TypeKnativeEvent = 'eventType';\nexport const TypeKnativeBroker = 'broker';\nexport const SystemKnative = 'knative-event-mesh';\nexport const OwnerKnative = 'knative';\n","import {PluginTaskScheduler, TaskRunner} from '@backstage/backend-tasks';\nimport {\n    ANNOTATION_LOCATION,\n    ANNOTATION_ORIGIN_LOCATION,\n    ApiEntity,\n    ComponentEntity,\n    Entity,\n    EntityLink,\n} from '@backstage/catalog-model';\n\nimport {Config} from '@backstage/config';\n\nimport {EntityProvider, EntityProviderConnection,} from '@backstage/plugin-catalog-node';\n\nimport {Logger} from 'winston';\nimport {readKnativeEventMeshProviderConfigs} from \"./config\";\nimport {\n    KnativeEventMeshProviderConfig,\n    OwnerKnative,\n    SystemKnative,\n    TypeKnativeBroker,\n    TypeKnativeEvent\n} from \"./types\";\n\nexport type EventType = {\n    name:string;\n    namespace:string;\n    type:string;\n    uid:string;\n    description?:string;\n    schemaData?:string;\n    schemaURL?:string;\n    labels?:Record<string, string>;\n    annotations?:Record<string, string>;\n    consumedBy?:string[];\n};\n\nexport type Broker = {\n    name:string;\n    namespace:string;\n    uid:string;\n    labels?:Record<string, string>;\n    annotations?:Record<string, string>;\n    providedEventTypes?:string[];\n};\n\ntype EventMesh = {\n    eventTypes:EventType[];\n    brokers:Broker[];\n};\n\nexport async function getEventMesh(baseUrl:string):Promise<EventMesh> {\n    const response = await fetch(`${baseUrl}`);\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    }\n    return await response.json() as Promise<EventMesh>;\n}\n\nexport class KnativeEventMeshProvider implements EntityProvider {\n    private readonly env:string;\n    private readonly baseUrl:string;\n    private readonly logger:Logger;\n    private readonly scheduleFn:() => Promise<void>;\n    private connection?:EntityProviderConnection;\n\n    static fromConfig(\n        configRoot:Config,\n        options:{\n            logger:Logger;\n            schedule?:TaskRunner;\n            scheduler?:PluginTaskScheduler;\n        },\n    ):KnativeEventMeshProvider[] {\n        const providerConfigs = readKnativeEventMeshProviderConfigs(configRoot);\n\n        if (!options.schedule && !options.scheduler) {\n            throw new Error('Either schedule or scheduler must be provided.');\n        }\n\n        const logger = options.logger.child({plugin: 'knative-event-mesh-backend'});\n        logger.info(`Found ${providerConfigs.length} knative event mesh provider configs with ids: ${providerConfigs.map(providerConfig => providerConfig.id).join(', ')}`);\n\n        return providerConfigs.map(providerConfig => {\n            if (!options.schedule && !providerConfig.schedule) {\n                throw new Error(`No schedule provided neither via code nor config for KnativeEventMesh entity provider:${providerConfig.id}.`);\n            }\n\n            let taskRunner;\n\n            if (options.scheduler && providerConfig.schedule) {\n                // Create a scheduled task runner using the provided scheduler and schedule configuration\n                taskRunner = options.scheduler.createScheduledTaskRunner(providerConfig.schedule);\n            } else if (options.schedule) {\n                // Use the provided schedule directly\n                taskRunner = options.schedule;\n            } else {\n                // Handle the case where both options.schedule and options.scheduler are missing\n                throw new Error('Neither schedule nor scheduler is provided.');\n            }\n\n            return new KnativeEventMeshProvider(\n                providerConfig,\n                options.logger,\n                taskRunner,\n            );\n        });\n    }\n\n    constructor(config:KnativeEventMeshProviderConfig, logger:Logger, taskRunner:TaskRunner) {\n        this.env = config.id;\n        this.baseUrl = config.baseUrl;\n\n        this.logger = logger.child({\n            target: this.getProviderName(),\n        });\n\n        this.scheduleFn = this.createScheduleFn(taskRunner);\n    }\n\n    private createScheduleFn(taskRunner:TaskRunner):() => Promise<void> {\n        return async () => {\n            const taskId = `${this.getProviderName()}:run`;\n            return taskRunner.run({\n                id: taskId,\n                fn: async () => {\n                    try {\n                        await this.run();\n                    } catch (error:any) {\n                        // Ensure that we don't log any sensitive internal data:\n                        this.logger.error(\n                            `Error while fetching Knative Event Mesh from ${this.baseUrl}`,\n                            {\n                                // Default Error properties:\n                                name: error.name,\n                                message: error.message,\n                                stack: error.stack,\n                                // Additional status code if available:\n                                status: error.response?.status,\n                            },\n                        );\n                    }\n                },\n            });\n        };\n    }\n\n    getProviderName():string {\n        return `knative-event-mesh-provider-${this.env}`;\n    }\n\n    async connect(connection:EntityProviderConnection):Promise<void> {\n        this.connection = connection;\n        await this.scheduleFn();\n    }\n\n    async run():Promise<void> {\n        if (!this.connection) {\n            throw new Error('Not initialized');\n        }\n\n        const url = this.baseUrl;\n\n        const eventMesh = await getEventMesh(url);\n\n        const entities = this.buildEntities(eventMesh);\n\n        await this.connection.applyMutation({\n            type: 'full',\n            entities: entities.map(entity => ({\n                entity,\n                locationKey: this.getProviderName(),\n            })),\n        });\n    }\n\n    private buildEntities(eventMesh:EventMesh) {\n        const entities:Entity[] = [];\n\n        for (const eventType of eventMesh.eventTypes) {\n            const entity = this.buildEventTypeEntity(eventType);\n            entities.push(entity);\n        }\n\n        for (const broker of eventMesh.brokers) {\n            const entity = this.buildBrokerEntity(broker);\n            entities.push(entity);\n        }\n        return entities;\n    }\n\n    buildEventTypeEntity(eventType:EventType):ApiEntity {\n        const annotations = eventType.annotations ?? {} as Record<string, string>;\n        annotations[ANNOTATION_ORIGIN_LOCATION] = annotations[ANNOTATION_LOCATION] = `url:${this.baseUrl}`;\n\n        const links:EntityLink[] = [];\n        if (eventType.schemaURL) {\n            links.push({\n                title: \"View external schema\",\n                icon: \"scaffolder\",\n                url: eventType.schemaURL\n            });\n        }\n\n        return {\n            apiVersion: 'backstage.io/v1alpha1',\n            kind: 'API',\n            metadata: {\n                name: eventType.name,\n                namespace: eventType.namespace,\n                description: eventType.description,\n                labels: eventType.labels || {} as Record<string, string>,\n                annotations: annotations,\n                // we don't use tags\n                tags: [],\n                links: links,\n                title: `${eventType.type} - (${eventType.namespace}/${eventType.name})`,\n                // custom field, stored\n                // see https://backstage.io/docs/features/software-catalog/extending-the-model#adding-new-fields-to-the-metadata-object\n                // can't make it type safe as the Metadata type is not exported\n                consumedBy: eventType.consumedBy ?? [],\n            },\n            spec: {\n                type: TypeKnativeEvent,\n                lifecycle: this.env,\n                system: SystemKnative,\n                owner: OwnerKnative,\n                definition: eventType.schemaData || \"{}\",\n            },\n        };\n    }\n\n    buildBrokerEntity(broker:Broker):ComponentEntity {\n        const annotations = broker.annotations ?? {} as Record<string, string>;\n        annotations[ANNOTATION_ORIGIN_LOCATION] = annotations[ANNOTATION_LOCATION] = `url:${this.baseUrl}`;\n\n        return {\n            apiVersion: 'backstage.io/v1alpha1',\n            kind: 'Component',\n            metadata: {\n                name: broker.name,\n                namespace: broker.namespace,\n                labels: broker.labels || {} as Record<string, string>,\n                annotations: annotations,\n                // we don't use tags\n                tags: [],\n            },\n            spec: {\n                type: TypeKnativeBroker,\n                lifecycle: this.env,\n                system: SystemKnative,\n                owner: OwnerKnative,\n                providesApis: !broker.providedEventTypes ? [] : broker.providedEventTypes.map((eventType:string) => `api:${eventType}`),\n            }\n        }\n    }\n}\n","import {CatalogClient} from '@backstage/catalog-client';\nimport {ComponentEntity, Entity} from '@backstage/catalog-model';\nimport {LocationSpec} from '@backstage/plugin-catalog-common';\nimport {\n    CatalogProcessor,\n    CatalogProcessorCache,\n    CatalogProcessorEmit,\n    CatalogProcessorRelationResult,\n} from '@backstage/plugin-catalog-node';\nimport {Logger} from \"winston\";\nimport {TypeKnativeEvent} from \"./types\";\n\n\nexport class KnativeEventMeshProcessor implements CatalogProcessor {\n    private readonly catalogApi:CatalogClient;\n    private readonly logger:Logger;\n    private readonly queryEntityPageLimit:number;\n\n    constructor(catalogApi:CatalogClient, logger:Logger, queryEntityPageLimit?:number) {\n        this.catalogApi = catalogApi;\n        this.queryEntityPageLimit = queryEntityPageLimit ?? 10000;\n\n        this.logger = logger.child({\n            target: this.getProcessorName(),\n        });\n    }\n\n    getProcessorName():string {\n        return \"knative-event-mesh-processor\";\n    }\n\n    async preProcessEntity(entity:Entity, _location:LocationSpec, emit:CatalogProcessorEmit, _originLocation:LocationSpec, _cache:CatalogProcessorCache):Promise<Entity> {\n        if (entity.kind === 'API' && entity.spec?.type === TypeKnativeEvent) {\n            this.logger.debug(`Processing KnativeEventType entity ${entity.metadata.namespace}/${entity.metadata.name}`);\n\n            // if there's no relation to build, return entity as is\n            if (!entity.metadata.consumedBy) {\n                this.logger.debug(`No consumers defined for KnativeEventType entity ${entity.metadata.namespace}/${entity.metadata.name}`);\n                return entity;\n            }\n\n            const consumers = entity.metadata.consumedBy as string[];\n            this.logger.debug(`Consumers defined for KnativeEventType entity ${entity.metadata.namespace}/${entity.metadata.name}: ${consumers.join(', ')}`);\n\n            // build relations\n            for (const consumedBy of consumers) {\n                this.logger.debug(`Building relations for KnativeEventType entity ${entity.metadata.namespace}/${entity.metadata.name} to consumer ${consumedBy}`);\n\n                // query the catalog for the component with the id\n                const consumerComponents = await this.findComponentsByBackstageId(entity.metadata.namespace as string, consumedBy);\n                this.logger.debug(`Found ${consumerComponents.length} components for KnativeEventType entity ${entity.metadata.namespace}/${entity.metadata.name} to consumer ${consumedBy}`);\n\n                for (const component of consumerComponents) {\n                    this.logger.debug(`Emitting relations for KnativeEventType entity ${entity.metadata.namespace}/${entity.metadata.name} for consumer ${consumedBy} via component ${component.metadata.namespace}/${component.metadata.name}`);\n\n                    // emit a relation from the API to the component\n                    const apiToComponentRelation:CatalogProcessorRelationResult = {\n                        type: 'relation',\n                        relation: {\n                            type: 'apiConsumedBy',\n                            source: {\n                                kind: 'API',\n                                namespace: entity.metadata.namespace as string,\n                                name: entity.metadata.name,\n                            },\n                            target: {\n                                kind: 'Component',\n                                namespace: component.metadata.namespace as string,\n                                name: component.metadata.name,\n                            },\n                        },\n                    };\n                    emit(apiToComponentRelation);\n\n                    // emit a relation from the component to the API\n                    const componentToApiRelation:CatalogProcessorRelationResult = {\n                        type: 'relation',\n                        relation: {\n                            type: 'consumesApi',\n                            source: {\n                                kind: 'Component',\n                                namespace: component.metadata.namespace as string,\n                                name: component.metadata.name,\n                            },\n                            target: {\n                                kind: 'API',\n                                namespace: entity.metadata.namespace as string,\n                                name: entity.metadata.name,\n                            },\n                        },\n                    };\n                    emit(componentToApiRelation);\n                }\n            }\n        }\n        return entity;\n    }\n\n    private async findComponentsByBackstageId(namespace:string, componentId:string) {\n        // fetch the component by the id\n        // example: http://localhost:7007/api/catalog/entities/by-query\n        // ?filter=kind=component,metadata.namespace=default,metadata.annotations.backstage.io/kubernetes-id=fraud-detector\n        let catalogApiCursor: string | undefined;\n        let entities: Entity[] = [];\n\n        try {\n            do {\n                const response = await this.catalogApi.queryEntities({\n                    filter: {\n                        kind: 'component',\n                        'metadata.namespace': namespace,\n                        'metadata.annotations.backstage.io/kubernetes-id': componentId,\n                    },\n                    cursor: catalogApiCursor,\n                    limit: this.queryEntityPageLimit\n                });\n                catalogApiCursor = response.pageInfo.nextCursor;\n                entities = entities.concat(response.items);\n            } while (catalogApiCursor)\n\n            return entities;\n        } catch (e) {\n            this.logger.error(`Failed to find components by backstage id ${namespace}/${componentId}: ${e}`);\n            return [] as ComponentEntity[];\n        }\n    }\n}\n"],"names":["readTaskScheduleDefinitionFromConfig","__publicField","ANNOTATION_ORIGIN_LOCATION","ANNOTATION_LOCATION"],"mappings":"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"}